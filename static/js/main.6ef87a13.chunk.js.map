{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","query","onSearch","onAdd","useState","setMovie","error","setError","isTouched","setIsTouched","isLoading","setIsLoading","isFound","setIsFound","hasError","Boolean","useEffect","onSubmit","event","preventDefault","fetch","then","res","json","catch","Response","Error","getMovie","foundMovie","Title","Poster","Plot","imdbID","finally","htmlFor","type","id","placeholder","cn","value","onChange","disabled","onClick","App","setMovies","setQuery","target","newMovie","some","prev","ReactDOM","render","document","getElementById"],"mappings":"8TAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,YAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACE,UAAQ,cACRC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAa,UAAQ,aAAlC,SAAgDD,EAAMK,aAI1D,sBAAKJ,UAAU,UAAU,UAAQ,mBAAjC,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAS,UAAQ,WAAhC,4BC3BKC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,c,sBCLnB,IAWaC,EAA6B,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC5D,EAA0BC,mBAAuB,MAAjD,mBAAOjB,EAAP,KAAckB,EAAd,KACA,EAA0BD,mBAA+B,MAAzD,mBAAOE,EAAP,KAAcC,EAAd,KAEA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAkCL,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KACA,EAA8BP,oBAAS,GAAvC,mBAAOQ,EAAP,KAAgBC,EAAhB,KAEMC,EAAWC,QAAQT,IAAWL,GAASO,GA6C7CQ,qBAAU,WACRT,EAAS,QACR,CAACN,IAeJ,OACE,qCACE,uBAAMb,UAAU,aAAa6B,SArDZ,SAACC,GACpBA,EAAMC,iBACNR,GAAa,GACTV,GCrCD,SAAkBA,GACvB,OAAOmB,MAAM,GAAD,OAHE,2CAGF,cAAiBnB,IAC1BoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,iBAAO,CACZC,SAAU,QACVC,MAAO,uBDiCPC,CAAS1B,GACNoB,MAAK,SAACO,GACL,IAAoBA,EAbMF,MAaO,CAC/B,IACEG,EAIED,EAJFC,MACAC,EAGEF,EAHFE,OACAC,EAEEH,EAFFG,KACAC,EACEJ,EADFI,OAcF,OAXA3B,EAAS,CACPb,MAAOqC,EACPpC,YAAasC,EACbpC,QAAQ,8BAAD,OAAgCqC,GACvCjC,OAAQiC,EACR1C,OA9Ca,QA8CLwC,EAjDE,4DAmDNA,SAENjB,GAAW,GAKbN,EAASqB,GACTf,GAAW,MACVoB,SAAQ,kBAAMtB,GAAa,OAuBhC,UACE,sBAAKvB,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ8C,QAAQ,cAAjC,yBAIA,qBAAK9C,UAAU,UAAf,SACE,uBACE,UAAQ,aACR+C,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZjD,UAAWkD,IAAG,QAAS,CACrB,YAAahC,IAEfiC,MAAOtC,EACPuC,SAvBS,SAACtB,GACpBT,GAAa,GACbP,EAASgB,QAwBFZ,GACC,mBAAGlB,UAAU,iBAAiB,UAAQ,eAAtC,SACGkB,EAAMoB,WAKb,sBAAKtC,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACE,UAAQ,eACR+C,KAAK,SACL/C,UAAWkD,IAAG,SAAU,WAAY,CAClC,aAAc5B,IAEhB+B,SAAU3B,IAAaN,EANzB,SAQGI,EACC,eAEA,mBAILzB,GACC,qBAAKC,UAAU,UAAf,SACE,wBACE,UAAQ,YACR+C,KAAK,SACL/C,UAAU,oBACVsD,QAAS,kBA/DrBvC,EA+D2ChB,GA9D3C0B,GAAW,GACXJ,GAAa,GACbF,EAAS,WACTF,EAAS,OAuDC,qCAYPlB,GACC,sBAAKC,UAAU,YAAY,UAAQ,mBAAnC,UACE,oBAAIA,UAAU,QAAd,qBACA,cAAC,EAAD,CAAWD,MAAOA,WElJfwD,EAAM,WACjB,MAA4BvC,mBAAkB,IAA9C,mBAAOP,EAAP,KAAe+C,EAAf,KAEA,EAA0BxC,mBAAS,IAAnC,mBAAOH,EAAP,KAAc4C,EAAd,KAaA,OACE,sBAAKzD,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQA,MAGtB,qBAAKT,UAAU,UAAf,SACE,cAAC,EAAD,CACEa,MAAOA,EACPC,SApBkB,SAACgB,GACzB2B,EAAS3B,EAAM4B,OAAOP,QAoBhBpC,MAjBe,SAAC4C,GACtBF,EAAS,IACJhD,EAAOmD,MAAK,gBAAGjD,EAAH,EAAGA,OAAH,OAAgBgD,EAAShD,SAAWA,MACnD6C,GAAU,SAACK,GAAD,4BAAcA,GAAd,CAAoBF,gBCdpCG,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.6ef87a13.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { ResponseError } from '../../types/ReponseError';\nimport { MovieData } from '../../types/MovieData';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\nconst DEFAULT_PICTURE = 'https://via.placeholder.com'\n  + '/360x270.png?text=no%20preview';\n\nconst EMPTY_PICTURE_TEXT = 'N/A';\n\ntype Props = {\n  query: string,\n  onSearch: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onAdd: (newMovie: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ query, onSearch, onAdd }) => {\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [error, setError] = useState<ResponseError | null>(null);\n\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFound, setIsFound] = useState(false);\n\n  const hasError = Boolean(error || (!query && isTouched));\n\n  const checkIfResponse = (response: ResponseError | MovieData):\n    response is MovieData => {\n    if ((response as ResponseError).Error) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsLoading(true);\n    if (query) {\n      getMovie(query)\n        .then((foundMovie) => {\n          if (checkIfResponse(foundMovie)) {\n            const {\n              Title,\n              Poster,\n              Plot,\n              imdbID,\n            } = foundMovie;\n\n            setMovie({\n              title: Title,\n              description: Plot,\n              imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n              imdbId: imdbID,\n              imgUrl: Poster === EMPTY_PICTURE_TEXT\n                ? DEFAULT_PICTURE\n                : Poster,\n            });\n            setIsFound(true);\n\n            return;\n          }\n\n          setError(foundMovie);\n          setIsFound(false);\n        }).finally(() => setIsLoading(false));\n    }\n  };\n\n  useEffect(() => {\n    setError(null);\n  }, [query]);\n\n  const handleAddToList = (newMovie: Movie) => {\n    onAdd(newMovie);\n    setIsFound(false);\n    setIsTouched(false);\n    setError(null);\n    setMovie(null);\n  };\n\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsTouched(true);\n    onSearch(event);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={cn('input', {\n                'is-danger': error,\n              })}\n              value={query}\n              onChange={handleSearch}\n            />\n          </div>\n          {error && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              {error.Error}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn('button', 'is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={hasError || !isTouched}\n            >\n              {isFound ? (\n                'Search again'\n              ) : (\n                'Find a movie'\n              )}\n            </button>\n          </div>\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => handleAddToList(movie)}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=901db6e1';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const [query, setQuery] = useState('');\n\n  const handleSearchMovie = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleAddMovie = (newMovie: Movie) => {\n    setQuery('');\n    if (!movies.some(({ imdbId }) => newMovie.imdbId === imdbId)) {\n      setMovies((prev) => [...prev, newMovie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          query={query}\n          onSearch={handleSearchMovie}\n          onAdd={handleAddMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}